diff --git "a/Engine/Plugins/Media/AmfMedia/Source/AmfMedia/Private/Player/AmfMediaTextureSample.h" "b/Engine/Plugins/Media/AmfMedia/Source/AmfMedia/Private/Player/AmfMediaTextureSample.h"
           
index f581761b56..76243c8b38 100644
--- "a/Engine/Plugins/Media/AmfMedia/Source/AmfMedia/Private/Player/AmfMediaTextureSample.h"
+++ "b/Engine/Plugins/Media/AmfMedia/Source/AmfMedia/Private/Player/AmfMediaTextureSample.h"
@@ -33,123 +33,127 @@
 #pragma once
 
 #include "CoreTypes.h"
+#include "CoreMinimal.h"
+#include "UObject/ObjectMacros.h"
+#include "RHI.h"
+#include "RHIResources.h"
+
 #include "IMediaTextureSample.h"
 #include "MediaObjectPool.h"
 #include "Math/IntPoint.h"
 #include "Misc/Timespan.h"
-#include "RHIResources.h"
 
 /**
 * Texture sample generated by AmfMedia player.
 */
 class FAmfMediaTextureSample
-    : public IMediaTextureSample
-    , public IMediaPoolable
+	: public IMediaTextureSample
+	, public IMediaPoolable
 {
 public:
-    /** Default constructor. */
-    FAmfMediaTextureSample()
-        : SampleFormat(EMediaTextureSampleFormat::Undefined)
-        , Time(FTimespan::Zero())
-        , Duration(FTimespan::Zero())
-        , Texture(nullptr)
-    {}
+	/** Default constructor. */
+	FAmfMediaTextureSample()
+		: SampleFormat(EMediaTextureSampleFormat::Undefined)
+		, Time(FTimespan::Zero())
+		, Duration(FTimespan::Zero())
+		, Texture(nullptr)
+	{}
 
-    /** Virtual destructor. */
-    virtual ~FAmfMediaTextureSample() { }
+	/** Virtual destructor. */
+	virtual ~FAmfMediaTextureSample() { }
 
 public:
-    /**
-    * Initialize the texture sample with a texture resource.
-    *
-    * @param InDim The sample buffer's width and height (in pixels).
-    * @param InOutputDim The sample's output width and height (in pixels).
-    * @param InTime The sample time (in the player's local clock).
-    * @param InDuration The duration for which the sample is valid.
-    * @return true on success, false otherwise.
-    */
-    bool Initialize(
-        TRefCountPtr<FRHITexture2D> InTexture,
-        FTimespan InTime,
-        FTimespan InDuration)
-    {
-        if (!InTexture.IsValid())
-        {
-            return false;
-        }
-
-        Texture = InTexture;
-        SampleFormat = EMediaTextureSampleFormat::CharBGRA;
-        Time = InTime;
-        Duration = InDuration;
-
-        return true;
-    }
+	/**
+	* Initialize the texture sample with a texture resource.
+	*
+	* @param InDim The sample buffer's width and height (in pixels).
+	* @param InOutputDim The sample's output width and height (in pixels).
+	* @param InTime The sample time (in the player's local clock).
+	* @param InDuration The duration for which the sample is valid.
+	* @return true on success, false otherwise.
+	*/
+	bool Initialize(
+		TRefCountPtr<FRHITexture2D> InTexture,
+		FTimespan InTime,
+		FTimespan InDuration)
+	{
+		if (!InTexture.IsValid())
+		{
+			return false;
+		}
+
+		Texture = InTexture;
+		SampleFormat = EMediaTextureSampleFormat::CharBGRA;
+		Time = InTime;
+		Duration = InDuration;
+
+		return true;
+	}
 
 public:
-    //~ IMediaTextureSample interface
-    virtual const void* GetBuffer() override
-    {
-        return nullptr;
-    }
-
-    virtual FIntPoint GetDim() const override
-    {
-        return Texture->GetTexture2D()->GetSizeXY();
-    }
-
-    virtual FTimespan GetDuration() const override
-    {
-        return Duration;
-    }
-
-    virtual EMediaTextureSampleFormat GetFormat() const override
-    {
-        return SampleFormat;
-    }
-
-    virtual FIntPoint GetOutputDim() const override
-    {
-        return Texture->GetTexture2D()->GetSizeXY();
-    }
-
-    virtual uint32 GetStride() const override
-    {
-        return Texture->GetTexture2D()->GetSizeX() * 4;
-    }
-
-    virtual FRHITexture* GetTexture() const override
-    {
-        return Texture;
-    }
-
-    virtual FTimespan GetTime() const override
-    {
-        return Time;
-    }
-
-    virtual bool IsCacheable() const override
-    {
-        return true;
-    }
-
-    virtual bool IsOutputSrgb() const override
-    {
-        return true;
-    }
+	//~ IMediaTextureSample interface
+	virtual const void* GetBuffer() override
+	{
+		return nullptr;
+	}
+
+	virtual FIntPoint GetDim() const override
+	{
+		return Texture->GetTexture2D()->GetSizeXY();
+	}
+
+	virtual FTimespan GetDuration() const override
+	{
+		return Duration;
+	}
+
+	virtual EMediaTextureSampleFormat GetFormat() const override
+	{
+		return SampleFormat;
+	}
+
+	virtual FIntPoint GetOutputDim() const override
+	{
+		return Texture->GetTexture2D()->GetSizeXY();
+	}
+
+	virtual uint32 GetStride() const override
+	{
+		return Texture->GetTexture2D()->GetSizeX() * 4;
+	}
+
+	virtual FRHITexture* GetTexture() const override
+	{
+		return Texture;
+	}
+
+	virtual FTimespan GetTime() const override
+	{
+		return Time;
+	}
+
+	virtual bool IsCacheable() const override
+	{
+		return true;
+	}
+
+	virtual bool IsOutputSrgb() const override
+	{
+		return true;
+	}
 
 private:
-    /** The sample format. */
-    EMediaTextureSampleFormat SampleFormat;
+	/** The sample format. */
+	EMediaTextureSampleFormat SampleFormat;
 
-    /** Duration for which the sample is valid. */
-    FTimespan Duration;
+	/** Duration for which the sample is valid. */
+	FTimespan Duration;
 
-    /** Presentation for which the sample was generated. */
-    FTimespan Time;
+	/** Presentation for which the sample was generated. */
+	FTimespan Time;
 
-    /** The sample's texture resource. */
-    TRefCountPtr<FRHITexture2D> Texture;
+	/** The sample's texture resource. */
+	TRefCountPtr<FRHITexture2D> Texture;
 };
 
 /** Implements a pool for AMF texture samples. */
